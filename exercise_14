#!/usr/bin/env python3

# Copyright 2014 Carl Winbäck. See the COPYING file at the top-level directory
# of this distribution.

# SOME NOTES ON THE SOLUTION
#
# This solution assumes that the blocksize is 16.
#
# I opted to make the oracle change the prefix on every call, mainly
# because I thought it was more fun that way.

from Crypto.Cipher import AES
from base64 import b64decode
from collections import Counter
from os import urandom
from random import SystemRandom
from libpals.util import nearest_multiple, pkcs7pad

# Constants for the secrets
secret_message = (b'Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbX'
                  b'kgaGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmlu'
                  b'ZyBqdXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZH'
                  b'JvdmUgYnkK')
SECRET_BYTES = b64decode(secret_message)
SECRET_KEY = urandom(16)


def encrypt(input_bytes):
    cipher = AES.new(SECRET_KEY, AES.MODE_ECB)
    random_prefix = urandom(SystemRandom().randint(1, 40))
    plaintext = pkcs7pad(random_prefix + input_bytes + SECRET_BYTES, 16)
    ciphertext = cipher.encrypt(plaintext)
    return ciphertext


def determine_ciphertext(plaintext):
    """Determine likely ciphertext for a given plaintext."""
    candidates = []
    while len(candidates) < 40:
        oracle_output = encrypt(plaintext + plaintext)
        block_a = oracle_output[16:32]
        block_b = oracle_output[32:48]
        if block_a == block_b:
            candidates.append(block_a)
    winner = Counter(candidates).most_common(1)[0][0]
    return winner


# Constants used for the attack
IDBLOCK_PLAINTEXT = urandom(16)
IDBLOCK_CIPHERTEXT = determine_ciphertext(IDBLOCK_PLAINTEXT)


def get_good_output(input_bytes):
    # By using the ”ID block” we can identify ciphertexts where the
    # prefix is 16 bytes long. When the prefix is 16 bytes long we
    # know how long the padding block will be and we can determine the
    # plaintext length.
    output = b''
    while len(output) == 0:
        ciphertext = encrypt(IDBLOCK_PLAINTEXT + input_bytes)
        if ciphertext[16:32] == IDBLOCK_CIPHERTEXT:
            output = ciphertext
    return output


def detect_plaintext_length():
    def detect_padding_length():
        initial_length = len(get_good_output(b''))
        current_length = 0
        i = 0
        while current_length <= initial_length:
            current_length = len(get_good_output(i * b'A'))
            i += 1
        padding_length = i - 1
        return padding_length


    max_possible_length = len(get_good_output(b''))
    padding_length = detect_padding_length()
    actual_length = max_possible_length - padding_length - 32
    return actual_length


def crack():
    blocksize = 16
    plaintext = b''
    plaintext_length = detect_plaintext_length()
    for ciphertext_index in range(1, plaintext_length + 1):
        block_end = nearest_multiple(ciphertext_index, blocksize) + 32
        block_start = (block_end - blocksize)
        filler = b'A' * (block_end - ciphertext_index - 32)
        byte_dictionary = {}
        for byte_index in range(0, 256):
            char = bytes([byte_index])
            ciphertext = get_good_output(filler + plaintext + char)
            byte_dictionary[ciphertext[block_start:block_end]] = char
        comparison_block = get_good_output(filler)[block_start:block_end]
        current_plaintext_byte = byte_dictionary[comparison_block]
        plaintext += current_plaintext_byte
    return plaintext


output_message = """SET 02 PROBLEM 14: Byte-at-a-time ECB decryption (Harder)

Plaintext:
"""

print(output_message)
plaintext_string = crack().decode(encoding='ascii')
print(plaintext_string)
